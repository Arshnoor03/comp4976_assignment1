// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using comp4976_assignment1.Data;

#nullable disable

namespace comp4976_assignment1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231016032827_M1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d9ebb063-a99f-4d4b-b0cf-89cb527eb3d5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c3045048-8ba8-42a3-ace1-4a444a372e3d",
                            Name = "Finance",
                            NormalizedName = "FINANCE"
                        },
                        new
                        {
                            Id = "aa7ee386-385e-4d57-af64-87db5b0331ff",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "71ba1a95-670b-4eaa-b2ed-09a3bc978d27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94128ba4-54a5-48bd-8b4b-17e9f340a04f",
                            Email = "aa@aa.aa",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AA@AA.AA",
                            NormalizedUserName = "AA@AA.AA",
                            PasswordHash = "AQAAAAIAAYagAAAAEKkm30m2+s2Qrny90gyuDgVDSoZX8rbLjhDSPhCX3SbBKpYipiQjDmKY2+bEs7IeGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "465b15d4-cfb7-4a32-8d00-77112a66b835",
                            TwoFactorEnabled = false,
                            UserName = "aa@aa.aa"
                        },
                        new
                        {
                            Id = "ef3324cd-cb7d-4081-952c-e842c5437f4f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b460d56-8bf2-41d4-ac14-a79296fb1d3c",
                            Email = "mm@mm.mm",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MM@MM.MM",
                            NormalizedUserName = "MM@MM.MM",
                            PasswordHash = "AQAAAAIAAYagAAAAENDzvEax/t07le+W0UB377S7J2bOiZ3RvA3ApLPmdTo+amZ8ySRucht7gjwXnVaIfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6708adeb-6f25-420d-b7b5-d06502d96e08",
                            TwoFactorEnabled = false,
                            UserName = "mm@mm.mm"
                        },
                        new
                        {
                            Id = "413105d4-70cf-4412-9bbb-3cce5b86f70f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7228d5ca-a0cf-47ce-9f24-0969824bf96f",
                            Email = "ff@ff.ff",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FF@FF.FF",
                            NormalizedUserName = "FF@FF.FF",
                            PasswordHash = "AQAAAAIAAYagAAAAEEsiAdGfmFe4ERS5MFvOJ6UOsBzjBnr8V+0gh5SNIIiBxUZJkwERjudYVJOfwqLylg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b51af4f2-353a-4225-a17d-8e694ac8e32c",
                            TwoFactorEnabled = false,
                            UserName = "ff@ff.ff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "71ba1a95-670b-4eaa-b2ed-09a3bc978d27",
                            RoleId = "d9ebb063-a99f-4d4b-b0cf-89cb527eb3d5"
                        },
                        new
                        {
                            UserId = "ef3324cd-cb7d-4081-952c-e842c5437f4f",
                            RoleId = "aa7ee386-385e-4d57-af64-87db5b0331ff"
                        },
                        new
                        {
                            UserId = "413105d4-70cf-4412-9bbb-3cce5b86f70f",
                            RoleId = "c3045048-8ba8-42a3-ace1-4a444a372e3d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("comp4976_assignment1.Models.ContactList", b =>
                {
                    b.Property<int>("AccountNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("AccountNo");

                    b.ToTable("ContactList", (string)null);

                    b.HasData(
                        new
                        {
                            AccountNo = 1,
                            City = "New York",
                            Country = "USA",
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4637),
                            CreatedBy = "Seed",
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4695),
                            ModifiedBy = "Seed",
                            PostalCode = "V5T 2W8",
                            Street = "123 Main St"
                        },
                        new
                        {
                            AccountNo = 2,
                            City = "Richmond",
                            Country = "Canada",
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4700),
                            CreatedBy = "Seed",
                            Email = "sam@fox.com",
                            FirstName = "Sam",
                            LastName = "Fox",
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4702),
                            ModifiedBy = "Seed",
                            PostalCode = "V4F 1M7",
                            Street = "457 Fox Avenue"
                        },
                        new
                        {
                            AccountNo = 3,
                            City = "Delta",
                            Country = "Canada",
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4704),
                            CreatedBy = "Seed",
                            Email = "ann@day.com",
                            FirstName = "Ann",
                            LastName = "Day",
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4713),
                            ModifiedBy = "Seed",
                            PostalCode = "V6G 1M6",
                            Street = "231 River Road"
                        });
                });

            modelBuilder.Entity("comp4976_assignment1.Models.Donations", b =>
                {
                    b.Property<int>("TransId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountNo")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransId");

                    b.HasIndex("AccountNo");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Donations", (string)null);

                    b.HasData(
                        new
                        {
                            TransId = 1,
                            AccountNo = 1,
                            Amount = 100f,
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5076),
                            CreatedBy = "Seed",
                            Date = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5071),
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5078),
                            ModifiedBy = "Seed",
                            Notes = "This is a first donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            TransId = 2,
                            AccountNo = 2,
                            Amount = 100f,
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5082),
                            CreatedBy = "Seed",
                            Date = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5080),
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5084),
                            ModifiedBy = "Seed",
                            Notes = "This is a second donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            TransId = 3,
                            AccountNo = 3,
                            Amount = 100f,
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5088),
                            CreatedBy = "Seed",
                            Date = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5086),
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5089),
                            ModifiedBy = "Seed",
                            Notes = "This is a third donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 3
                        });
                });

            modelBuilder.Entity("comp4976_assignment1.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4974),
                            CreatedBy = "Seed",
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4978),
                            ModifiedBy = "Seed",
                            Name = "Credit Card"
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4981),
                            CreatedBy = "Seed",
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4982),
                            ModifiedBy = "Seed",
                            Name = "PayPal"
                        },
                        new
                        {
                            PaymentMethodId = 3,
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4987),
                            CreatedBy = "Seed",
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(4989),
                            ModifiedBy = "Seed",
                            Name = "Debit Card"
                        });
                });

            modelBuilder.Entity("comp4976_assignment1.Models.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionType", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionTypeId = 1,
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5014),
                            CreatedBy = "Seed",
                            Description = "Donations made without any special purpose",
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5016),
                            ModifiedBy = "Seed",
                            Name = "General Donation"
                        },
                        new
                        {
                            TransactionTypeId = 2,
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5019),
                            CreatedBy = "Seed",
                            Description = "Donations made for homeless people",
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5039),
                            ModifiedBy = "Seed",
                            Name = "Food for homeless"
                        },
                        new
                        {
                            TransactionTypeId = 3,
                            Created = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5042),
                            CreatedBy = "Seed",
                            Description = "Donations for the purpose of upgrading the gym",
                            Modified = new DateTime(2023, 10, 15, 20, 28, 27, 727, DateTimeKind.Local).AddTicks(5043),
                            ModifiedBy = "Seed",
                            Name = "Repair of Gym"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("comp4976_assignment1.Models.Donations", b =>
                {
                    b.HasOne("comp4976_assignment1.Models.ContactList", "ContactList")
                        .WithMany()
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comp4976_assignment1.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comp4976_assignment1.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactList");

                    b.Navigation("PaymentMethod");

                    b.Navigation("TransactionType");
                });
#pragma warning restore 612, 618
        }
    }
}
